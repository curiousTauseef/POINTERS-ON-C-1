表达式的概念
单目运算符++和--返回的是拷贝

&& 表达式求值顺序，从左至右，左为假，便不会检查右边
|| 则是左为真，便不会检查右边
短路求值

条件操作符 
exp1 ? exp2 : exp3
exp1为真，整个表达式的值就是exp2，不会对exp3进行求值
exp1为假，整个表达式的值就是exp3，不会对exp2进行求值
使用场合:
if( a > 5 )	b[ 2*c+d*(e/5) ] = 3;
else  		b[ 2*c+d*(e/5) ] = -20;
可以改为
b[ 2*c+d*(e/5) ] = a > 5 ? 3 : -20

逗号操作符
将两个或多个表达式分隔开来。这些表达式自左向右逐个进行求值，整个逗号表达式的值就是最后那个表达式的值。
if( b + 1, c / 2, d > 0) //d>0时，整个表达式的值为真，但是没有人会这样写代码，因为对前两个表达式的求值毫无意义，它们的值只是被简单地丢弃。
但是，watch out the next code.
a = get_value();
count_value(a);
while(a>0)
{
	a = get_value();
	count_value(a);
}
这种形式的代码可以被更改为
while(a=get_value(),count_value(a),a>0){}
也可以使用内嵌的赋值形式
while(count_value(a=get_value()),a>0){}

[]是下标引用操作符，接受两个操作数：一个数组名和一个索引值。
array[i]等效于
*(array+i)

零是假，任何非零值皆为真

左值就是那些能够出现在赋值符号左边的东西。
右值就是那些可以出现在赋值符号右边的东西。

表达式的求值顺序一部分是由它所包含的操作符的优先级和结合性决定。(貌似钦定了另一部分是由编译器决定的)

复杂表达式的求值顺序是由3个因素决定的：操作符的优先级、操作符的结合性以及操作符是否控制执行的顺序。
结合性就是一串操作符是从左向右依次执行还是从右向左逐个执行。

由于表达式的求值顺序并非完全有操作符的优先级决定，所以像下面的语句是很危险的。
c + --c
--c在c之前或之后执行，表达式的结果在两种情况下将会不同。



